
# TYPES
type Profile {
  id: ID!
  first_name: String!
  last_name: String!
  email: String!
  birthday: Int
  gender: String!
  business_owner: Boolean!

}

type CustomerProfile{
  id: ID!
  profile: Profile!
}

type BusinessOwnerProfile {
  id: ID!
  profile: Profile!
  business: Business!
}

type Business {
  id: ID!
  name: String!
  phone: String!
  appointments: [Appointment]
  business_type: String # change this when different business types are figured out 
}

type Appointment {
  id: ID!
  clientName: String!
  clientEmail: String!
  date: String!
  time: String!
}
   
# Authentification
type Note @model @auth(rules: [ { allow: public } ] ){
  id: ID!
  name: String!
  description: String
  image: String
}


#INPUTS // adding these at the end
input profileInput {
  id: ID!
  first_name: String!
  last_name: String!
  email: String!
  birthday: Int
  business_owner: Boolean! 
}


# QUERIES
type Query {
  Profile: [Profile]
  userProfile(id: ID!): Profile
}


# MUTATIONS
type Mutation { # Needs to mimic Profile type
  createProfile(id: ID!
    first_name: String!
    last_name: String!
    email: String!
    birthday: Int
    gender: String!
    business_owner: Boolean! ): Profile

  createBusiness( id: ID!
  name: String!
  phone: String!
  appointments: [Appointment]
  business_type: String ): Business

  createAppointment( id: ID!
  clientName: String!
  clientEmail: String!
  date: String!
  time: String!): Appointment

}

# SUBSCRIPTIONS 
# Will be added later when needed

# ENUMS

# enum genders {
#   male
#   female
#   other
# }