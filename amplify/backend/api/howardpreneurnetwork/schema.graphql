# TYPES
type Profile {
  id: ID!
  first_name: String!
  last_name: String!
  email: String!
  birthday: Int
  gender: String!
  business_owner: Boolean!
}

type CustomerProfile {
  id: ID!
  profile: Profile!
  appointments: [Appointment]
}

type BusinessOwnerProfile {
  id: ID!
  profile: Profile!
  business: Business!
  appointments: [Appointment]
}

type Business @model{
  id: ID!
  name: String!
  phone: String!
  email: String!
  address: String!
  website: String!
  category: String!
  description: String!
  businessImagePath: String!
  appointments: [Appointment]
  
}

type Appointment {
  appointmentId: ID!

  businessName: String!
  businessId: ID!
  businessNumber: String!

  clientName: String!
  clientId: ID!
  clientNumber: String!
  clientEmail: String!

  date: String!
  time: String!
}

# Authentification
type Note @model @auth(rules: [{ allow: public }]) {
  id: ID!
  name: String!
  description: String
  image: String
}

# # INPUTS
# input profileInput {
#   first_name: String!
#   last_name: String!
#   email: String!
#   birthday: Int
#   business_owner: Boolean!
# }

# # QUERIES
# type Query {
#   profiles: [Profile]
#   userProfile(id: ID!): Profile
#   userCustomerProfile(id: ID): CustomerProfile
#   userBusinessOwnerProfile(id: ID): BusinessOwnerProfile

# }

# MUTATIONS
# type Mutation {
#   createProfile(
#     first_name: String!
#     last_name: String!
#     email: String!
#     birthday: Int
#     gender: String!
#     business_owner: Boolean!
#   ): Profile

#   # createBusiness(
#   #   name: String!
#   #   phone: String!
#   #   appointments: [Appointment]
#   #   business_type: String
#   # ): Business

#   createAppointment(
#   appointmentId: ID!

#   businessName: String!
#   businessId: ID!
#   businessNumber: String!

#   clientName: String!
#   clientId: ID!
#   clientNumber: String!
#   clientEmail: String!

#   date: String!
#   time: String!
#   ): Appointment
# }

# # SUBSCRIPTIONS
# # Will be added later when needed

# # ENUMS
# # enum genders {
# #   male
# #   female
# #   other
# # }
